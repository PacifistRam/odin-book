// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique  
  userName   String    @unique
  password   String 
  profile    Profile?
  posts      Post[] 
  comments   Comment[]
  likes      Likes[]
  follower Follows[] @relation("follower")
  following  Follows[] @relation("following")

  
}

model Profile {
  id         Int     @id @default(autoincrement())
  firstName  String?
  lastName   String?
  bio        String?
  profilePic String?
  user       User    @relation(fields: [userId], references: [id]) 
  userId     Int     @unique
  
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  content   String?
  deletedAt DateTime?
  author    User?      @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId  Int?
  comments  Comment[]
  likes     Likes[]
}

model Comment {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  text        String
  commenter   User?     @relation(fields: [commenterId], references: [id], onDelete: SetNull)
  commenterId Int?
  post        Post     @relation(fields: [postId], references: [id])
  postId      Int
}

model Likes {
  id        Int  @id @default(autoincrement())
  likedBy   User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    Int?
  likedPost Post @relation(fields: [postId], references: [id])
  postId    Int
  @@unique([userId, postId])
}

model Follows {
  follower   User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId Int
  following    User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId  Int

  @@id([followingId, followerId])
}
